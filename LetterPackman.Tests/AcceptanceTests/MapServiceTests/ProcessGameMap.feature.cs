// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.MapServiceTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProcessGameMap")]
    public partial class ProcessGameMapFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ProcessGameMap.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AcceptanceTests/MapServiceTests", "ProcessGameMap", "Follow a path of characters & collect letters", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid maps - A basic example")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void ValidMaps_ABasicExample()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid maps - A basic example", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "@",
                            "-",
                            "-",
                            "-",
                            "A",
                            "-",
                            "-",
                            "-",
                            "+"});
                table1.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table1.AddRow(new string[] {
                            "x",
                            "-",
                            "B",
                            "-",
                            "+",
                            "",
                            "",
                            "",
                            "C"});
                table1.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "|"});
                table1.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "-",
                            "-",
                            "+"});
#line 7
    testRunner.Given("I have a map", ((string)(null)), table1, "Given ");
#line hidden
#line 14
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("result should be Letters: ACB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.And("result should be Path as characters: @---A---+|C|+---+|+-B-x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid maps - Go straight through intersections")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void ValidMaps_GoStraightThroughIntersections()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid maps - Go straight through intersections", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "@",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "|",
                            "",
                            "+",
                            "-",
                            "C",
                            "-",
                            "-",
                            "+",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "A",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "+",
                            "-",
                            "-",
                            "-",
                            "B",
                            "-",
                            "-",
                            "+",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "x"});
                table2.AddRow(new string[] {
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table2.AddRow(new string[] {
                            "",
                            "",
                            "+",
                            "-",
                            "-",
                            "-",
                            "D",
                            "-",
                            "-",
                            "+"});
#line 20
    testRunner.Given("I have a map", ((string)(null)), table2, "Given ");
#line hidden
#line 29
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then("result should be Letters: ABCD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.And("result should be Path as characters: @|A+---B--+|+--C-+|-||+---D--+|x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid maps - Letters may be found on turns")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void ValidMaps_LettersMayBeFoundOnTurns()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid maps - Letters may be found on turns", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "@",
                            "-",
                            "-",
                            "-",
                            "A",
                            "-",
                            "-",
                            "-",
                            "+"});
                table3.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table3.AddRow(new string[] {
                            "x",
                            "-",
                            "B",
                            "-",
                            "+",
                            "",
                            "",
                            "",
                            "|"});
                table3.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "|"});
                table3.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "-",
                            "-",
                            "C"});
#line 35
    testRunner.Given("I have a map", ((string)(null)), table3, "Given ");
#line hidden
#line 42
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("result should be Letters: ACB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And("result should be Path as characters: @---A---+|||C---+|+-B-x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid maps - Do not collect a letter from the same location twice")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void ValidMaps_DoNotCollectALetterFromTheSameLocationTwice()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid maps - Do not collect a letter from the same location twice", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "O",
                            "-",
                            "N",
                            "-",
                            "+",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "I",
                            "-",
                            "+"});
                table4.AddRow(new string[] {
                            "@",
                            "-",
                            "G",
                            "-",
                            "O",
                            "-",
                            "+",
                            "",
                            "|",
                            "",
                            "|",
                            "",
                            "|"});
                table4.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "|",
                            "",
                            "+",
                            "-",
                            "+",
                            "",
                            "E"});
                table4.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "+",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "S"});
                table4.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table4.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "x"});
#line 48
    testRunner.Given("I have a map", ((string)(null)), table4, "Given ");
#line hidden
#line 58
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("result should be Letters: GOONIES", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.And("result should be Path as characters: @-G-O-+|+-+|O||+-O-N-+|I|+-+|+-I-+|ES|x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid maps - Keep direction, even in a compact space")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void ValidMaps_KeepDirectionEvenInACompactSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid maps - Keep direction, even in a compact space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "",
                            "+",
                            "-",
                            "L",
                            "-",
                            "+",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "",
                            "|",
                            "",
                            "",
                            "+",
                            "A",
                            "-",
                            "+"});
                table5.AddRow(new string[] {
                            "@",
                            "B",
                            "+",
                            "",
                            "+",
                            "+",
                            "",
                            "H"});
                table5.AddRow(new string[] {
                            "",
                            "+",
                            "+",
                            "",
                            "",
                            "",
                            "",
                            "x"});
#line 64
    testRunner.Given("I have a map", ((string)(null)), table5, "Given ");
#line hidden
#line 70
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.Then("result should be Letters: BLAH", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.And("result should be Path as characters: @B+++B|+-L-+A+++A-+Hx", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid maps - Ignore stuff after end of path")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void ValidMaps_IgnoreStuffAfterEndOfPath()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid maps - Ignore stuff after end of path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table6.AddRow(new string[] {
                            "@",
                            "-",
                            "A",
                            "-",
                            "-",
                            "+",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table6.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table6.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "B",
                            "-",
                            "-",
                            "x",
                            "-",
                            "C",
                            "-",
                            "-",
                            "D"});
#line 76
    testRunner.Given("I have a map", ((string)(null)), table6, "Given ");
#line hidden
#line 81
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.Then("result should be Letters: AB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
 testRunner.And("result should be Path as characters: @-A--+|+-B--x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Missing start character")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_MissingStartCharacter()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Missing start character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table7.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "-",
                            "A",
                            "-",
                            "-",
                            "-",
                            "+"});
                table7.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table7.AddRow(new string[] {
                            "x",
                            "-",
                            "B",
                            "-",
                            "+",
                            "",
                            "",
                            "",
                            "C"});
                table7.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "|"});
                table7.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "-",
                            "-",
                            "+"});
#line 87
    testRunner.Given("I have a map", ((string)(null)), table7, "Given ");
#line hidden
#line 94
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.Then("exception should be generated: Character \'@\' not found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Missing end character")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_MissingEndCharacter()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Missing end character", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table8.AddRow(new string[] {
                            "@",
                            "-",
                            "-",
                            "A",
                            "-",
                            "-",
                            "-",
                            "+"});
                table8.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table8.AddRow(new string[] {
                            "",
                            "B",
                            "-",
                            "+",
                            "",
                            "",
                            "",
                            "C"});
                table8.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "|"});
                table8.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "-",
                            "-",
                            "+"});
#line 99
    testRunner.Given("I have a map", ((string)(null)), table8, "Given ");
#line hidden
#line 106
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.Then("exception should be generated: Character \'x\' not found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Multiple starts1")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_MultipleStarts1()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Multiple starts1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table9.AddRow(new string[] {
                            "",
                            "@",
                            "-",
                            "-",
                            "A",
                            "-",
                            "@",
                            "-",
                            "+"});
                table9.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table9.AddRow(new string[] {
                            "x",
                            "-",
                            "B",
                            "-",
                            "+",
                            "",
                            "",
                            "",
                            "C"});
                table9.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "|"});
                table9.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "-",
                            "-",
                            "+"});
#line 111
    testRunner.Given("I have a map", ((string)(null)), table9, "Given ");
#line hidden
#line 118
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.Then("exception should be generated: More that one \'@\' found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Multiple starts2")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_MultipleStarts2()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Multiple starts2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table10.AddRow(new string[] {
                            "@",
                            "-",
                            "-",
                            "A",
                            "-",
                            "-",
                            "-",
                            "+"});
                table10.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table10.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "C"});
                table10.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "x"});
                table10.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "@",
                            "-",
                            "B",
                            "-",
                            "+"});
#line 123
    testRunner.Given("I have a map", ((string)(null)), table10, "Given ");
#line hidden
#line 130
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.Then("exception should be generated: More that one \'@\' found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Multiple starts3")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_MultipleStarts3()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Multiple starts3", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table11.AddRow(new string[] {
                            "",
                            "@",
                            "-",
                            "-",
                            "A",
                            "-",
                            "-",
                            "x"});
                table11.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table11.AddRow(new string[] {
                            "x",
                            "-",
                            "B",
                            "-",
                            "+",
                            "",
                            "",
                            ""});
                table11.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            ""});
                table11.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "@",
                            "",
                            "",
                            ""});
#line 135
    testRunner.Given("I have a map", ((string)(null)), table11, "Given ");
#line hidden
#line 142
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
 testRunner.Then("exception should be generated: More that one \'@\' found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Fork in path")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_ForkInPath()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Fork in path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table12.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "-",
                            "B"});
                table12.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table12.AddRow(new string[] {
                            "@",
                            "-",
                            "-",
                            "A",
                            "-",
                            "-",
                            "-",
                            "+"});
                table12.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|"});
                table12.AddRow(new string[] {
                            "",
                            "",
                            "x",
                            "+",
                            "",
                            "",
                            "",
                            "C"});
                table12.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "|",
                            "",
                            "",
                            "",
                            "|"});
                table12.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "+",
                            "-",
                            "-",
                            "-",
                            "+"});
#line 147
    testRunner.Given("I have a map", ((string)(null)), table12, "Given ");
#line hidden
#line 156
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
 testRunner.Then("exception should be generated: Fork in path found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Broken path")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_BrokenPath()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Broken path", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table13.AddRow(new string[] {
                            "@",
                            "-",
                            "-",
                            "A",
                            "-",
                            "+",
                            "",
                            ""});
                table13.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "|",
                            "",
                            ""});
                table13.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table13.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "B",
                            "-",
                            "x"});
#line 161
    testRunner.Given("I have a map", ((string)(null)), table13, "Given ");
#line hidden
#line 167
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.Then("exception should be generated: Broken path found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Multiple starting paths")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_MultipleStartingPaths()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Multiple starting paths", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table14.AddRow(new string[] {
                            "",
                            "-",
                            "B",
                            "-",
                            "@",
                            "-",
                            "A",
                            "-",
                            "x"});
#line 172
    testRunner.Given("I have a map", ((string)(null)), table14, "Given ");
#line hidden
#line 175
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 176
 testRunner.Then("exception should be generated: Multiple starting paths found in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid maps - Fake turn")]
        [NUnit.Framework.CategoryAttribute("unit")]
        public void InvalidMaps_FakeTurn()
        {
            string[] tagsOfScenario = new string[] {
                    "unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid maps - Fake turn", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table15.AddRow(new string[] {
                            "@",
                            "-",
                            "A",
                            "-",
                            "+",
                            "-",
                            "B",
                            "-",
                            "x"});
#line 180
    testRunner.Given("I have a map", ((string)(null)), table15, "Given ");
#line hidden
#line 183
 testRunner.When("I execute the ProcessGameMap function", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 184
 testRunner.Then("exception should be generated: Fake turn in map.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
